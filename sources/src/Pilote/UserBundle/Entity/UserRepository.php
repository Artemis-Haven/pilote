<!--

Copyright (C) 2015 Hamza Ayoub, Valentin Chareyre, Sofian Hamou-Mamar, 
Alain Krok, Wenlong Li, RÃ©mi Patrizio, Yamine Zaidou

________________________________

This file is part of Pilote.

    Pilote is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Pilote is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Pilote.  If not, see <http://www.gnu.org/licenses/>.

-->

<?php

namespace Pilote\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	public function findUsersForBoard($boardId, $username)
    {
    	$nots = $this->createQueryBuilder('user')
    		->select('user.id')
        	->leftjoin('user.boards', 'board')
	        ->where('board.id = :boardId')
	        ->setParameter(':boardId', $boardId)
	        ->getQuery()->getResult();

	    if (empty($nots)) {
	        $query = $this->createQueryBuilder('u')
	        	->select('u')
	        	->where('u.username LIKE :username')
		        ->orderBy('u.username', 'ASC')
		        ->setParameter('username', '%'.$username.'%');
	    } else {
	        $query = $this->createQueryBuilder('u')
	        	->select('u')
	        	->where('u.id NOT IN(:members)')
	        	->andWhere('u.username LIKE :username')
		        ->orderBy('u.username', 'ASC')
		        ->setParameter('members', array_values($nots))
		        ->setParameter('username', '%'.$username.'%');
	    }

        return $query->getQuery()->getResult();
	}

	public function findUsersForThread($threadId, $username)
    {
    	$nots = $this->createQueryBuilder('user')
    		->select('user.id')
        	->leftjoin('user.threadMetadata', 'metadata')
	        ->where('metadata.thread = :thread')
	        ->setParameter(':thread', $threadId)
	        ->getQuery()->getResult();
	        
        $query = $this->createQueryBuilder('u')
        	->select('u')
        	->where('u.id NOT IN(:members)')
        	->andWhere('u.username LIKE :username')
	        ->orderBy('u.username', 'ASC')
	        ->setParameter('members', array_values($nots))
	        ->setParameter('username', '%'.$username.'%');
        return $query->getQuery()->getResult();
	}

	public function count()
	{
		return $this->createQueryBuilder('u')
					->select('count(u)')
					->getQuery()
					->getSingleScalarResult();
	}

	public function findByRole($role) 
	{
	    $qb = $this->createQueryBuilder('u')
	    	->select('u')
            ->where('u.roles LIKE :roles')
            ->setParameter('roles', '%"' . $role . '"%');
    	return $qb->getQuery()->getResult();
	}

	public function findLastSenderForThread($threadId)
	{
		$query = $this->createQueryBuilder('u')
        	->select('u')
        	->innerJoin('PiloteMessageBundle:Message', 'm', 'WITH', 'u.id = m.sender')
        	->where('m.thread = :thread')
	        ->orderBy('m.createdAt', 'DESC')
	        ->setParameter('thread', $threadId)
     		->setMaxResults(1);
	    return $query->getQuery()->getOneOrNullResult();
	}

	public function findAllOthers($userId = null, $filter = null)
    {
    	if ($userId == null) {
    		$userId = $this->getUser()->getId();
    	}

        $query = $this->createQueryBuilder('u')
        	->select('u')
        	->where('u.id != :userid')
        	->andWhere('u.enabled = true')
	        ->orderBy('u.username', 'ASC')
	        ->setParameter('userid', $userId);
	    if ($filter != null) {
        $query->andWhere('u.username LIKE :filter')
	        ->setParameter('filter', '%'.$filter.'%');
	    }
        return $query->getQuery()->getResult();
	}

}